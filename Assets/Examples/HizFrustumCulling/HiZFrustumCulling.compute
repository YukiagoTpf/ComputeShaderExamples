// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HiZFrustumCulling

uint instanceCount;
float4 boundSizeInput;
float4 FrustumPlane[6];
StructuredBuffer<float4x4> LocalToWorldinput;//M 矩阵
AppendStructuredBuffer<float4x4> result;

float4x4 vpMatrix;//相机的VP矩阵
Texture2D hizTexture;//hiz纹理
uint depthTextureSize;//原始深度图的大小

//如何判断一个点在平面内还是外？
//先获取这个平面的平面方程，将点数值带入，= 0代表在平面上，>0代表在平面正面（也就是法向量指向的方向），< 0 代表在平面内
bool isOutsidePoint(float4 plane , float3 pointpos)
{
    if (dot(plane.xyz,pointpos) + plane.w > 0)
        return true;
    return false;
}

[numthreads(640,1,1)]
void HiZFrustumCulling (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= instanceCount)
        return;
    float4x4 perInstancedLToWMartix = LocalToWorldinput[id.x];
    float4 boundSize = boundSizeInput;
    float3 boundMin = float3(-boundSize.x/2,0,-boundSize.z/2);
    float3 boundMax = float3(boundSize.x/2,boundSize.y,boundSize.z/2);
    float4 boundVertexs_world[8];
    
    boundVertexs_world[0] = mul(perInstancedLToWMartix,float4(boundMin,1));//底面左下
    boundVertexs_world[1] = mul(perInstancedLToWMartix,float4(boundMin.x,boundMin.y,boundMax.z,1));//底面左上
    boundVertexs_world[2] = mul(perInstancedLToWMartix,float4(boundMax.x,boundMin.y,boundMin.z,1));//底面右下
    boundVertexs_world[3] = mul(perInstancedLToWMartix,float4(boundMax.x,boundMin.y,boundMax.z,1));//底面右上
    
    boundVertexs_world[4] = mul(perInstancedLToWMartix,float4(boundMax,1));//顶面右上
    boundVertexs_world[5] = mul(perInstancedLToWMartix,float4(boundMax.x,boundMax.y,boundMin.z,1));//顶面右下
    boundVertexs_world[6] = mul(perInstancedLToWMartix,float4(boundMin.x,boundMax.y,boundMax.z,1));//顶面左上
    boundVertexs_world[7] = mul(perInstancedLToWMartix,float4(boundMin.x,boundMax.y,boundMin.z,1));//顶面左下

    //6个面，8个点，如果8点都在某一面外，那必在视锥体外
    for (int i = 0; i < 6; i++)
    {
        for(int j = 0; j < 8; j++)
        {
            float3 boundPosition = boundVertexs_world[j].xyz;
            if(!isOutsidePoint(FrustumPlane[i], boundPosition))
                break;
            if(j == 7)
                return;
        }
    }

    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;//NDC下新的的AABB各个参数
    //-------------------------------------------------------Hiz遮挡剔除-------------------------------------------------------
    //ndc的AABB的左下角和右上角的uv坐标，ndc的-1到1转换为uv的0到1
    float2 uvLeftBottom = float2(minX, minY) * 0.5f + 0.5f;
    float2 uvRightTop = float2(maxX, maxY) * 0.5f + 0.5f;
    //DirextX下NDC的z值即为深度（因为MVP变换后是反转过的，所以要取最大的那个值）
    float depth = maxZ;
    

    //计算应该读取哪层mipmap
    uint mipmapLevel = (uint)clamp(log2(max(maxX - minX, maxY - minY) * 0.5f * depthTextureSize), 0, log2(depthTextureSize) - 4);
    //当前mipmap的大小
    uint size = depthTextureSize / (1 << mipmapLevel);

    //左下角和右下角点所在的像素,不使用clamp会导致相机左右边出现一条剔除不掉的草，因为有些草部分超框了
    uint2 pixelLeftBottom = uint2(clamp(uvLeftBottom.x * size, 0, size - 1), clamp(uvLeftBottom.y * size, 0, size - 1));
    uint2 pixelRightTop = uint2(clamp(uvRightTop.x * size, 0, size - 1), clamp(uvRightTop.y * size, 0, size - 1));
    
    //采样对应深度图的对应像素的深度值，并且作比较
    float depthInTexture = hizTexture.mips[mipmapLevel][pixelLeftBottom].r;
    
    if (pixelLeftBottom.x < pixelRightTop.x && pixelLeftBottom.y < pixelRightTop.y) {
        depthInTexture = min(min(depthInTexture, hizTexture.mips[mipmapLevel][pixelRightTop].r),
            min(hizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, hizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
    }
    else if (pixelLeftBottom.x < pixelRightTop.x)
        depthInTexture = min(depthInTexture, hizTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r);
    else if (pixelLeftBottom.y < pixelRightTop.y)
        depthInTexture = min(depthInTexture, hizTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r);

    if (depthInTexture > depth)
        return;
    result.Append(perInstancedLToWMartix);
}
