// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HiZFrustumCulling
#pragma kernel Copy
uint instanceCount;
float4 boundSizeInput;
float4 FrustumPlane[6];
StructuredBuffer<float4x4> LocalToWorldinput;//M 矩阵
AppendStructuredBuffer<float4x4> result;


//****以下这些参数全由HizMapPass全局设置得到***//
Texture2D _HizMap;
uniform float4 _HizMapSize;
uniform float4x4 _HizCameraMatrixVP;

RWTexture2D<float4> TestResult; 
//在Clip Space下，根据齐次坐标做Clipping操作
bool IsInClipSpace(float4 clipSpacePosition)
{
    return clipSpacePosition.x > -clipSpacePosition.w && clipSpacePosition.x < clipSpacePosition.w&&
    clipSpacePosition.y > -clipSpacePosition.w && clipSpacePosition.y < clipSpacePosition.w&&
    clipSpacePosition.z > 0 && clipSpacePosition.z < clipSpacePosition.w;
}

[numthreads(640,1,1)]
void HiZFrustumCulling (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= instanceCount)
        return;
    float4x4 perInstancedLToWMartix = LocalToWorldinput[id.x];
    float4x4 mvpMatrix = mul(_HizCameraMatrixVP, perInstancedLToWMartix);
    float4 boundSize = boundSizeInput;

    float3 boundMin = float3(-boundSize.x/2,0,-boundSize.z/2);
    float3 boundMax = float3(boundSize.x/2,boundSize.y,boundSize.z/2);

    
    //包围盒的8个顶点的View Space坐标
    float4 boundVerts[8];
    boundVerts[0] = float4(boundMin, 1);
    boundVerts[1] = float4(boundMax, 1);
    boundVerts[2] = float4(boundMax.x, boundMax.y, boundMin.z, 1);
    boundVerts[3] = float4(boundMax.x, boundMin.y, boundMax.z, 1);
    boundVerts[4] = float4(boundMax.x, boundMin.y, boundMin.z, 1);
    boundVerts[5] = float4(boundMin.x, boundMax.y, boundMax.z, 1);
    boundVerts[6] = float4(boundMin.x, boundMax.y, boundMin.z, 1);
    boundVerts[7] = float4(boundMin.x, boundMin.y, boundMax.z, 1);
    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;//NDC下新的的AABB各个参数
    //-------------------------------------------------------视椎剔除-------------------------------------------------------
    //通过mvp矩阵得到顶点的Clip Space的齐次坐标，然后在Clip Space做视椎剔除判断，所有点都不在NDC内就被剔除。
    bool isInClipSpace = false;
    for (int i = 0; i < 8; i++)
    {
        float4 ndcbounds = mul(mvpMatrix, boundVerts[i]);
        if (!isInClipSpace && IsInClipSpace(ndcbounds))
            isInClipSpace = true;

        //计算该草ndc下的AABB
        float3 ndc = ndcbounds.xyz / ndcbounds.w;
        if (minX > ndc.x) minX = ndc.x;
        if (minY > ndc.y) minY = ndc.y;
        if (minZ > ndc.z) minZ = ndc.z;
        if (maxX < ndc.x) maxX = ndc.x;
        if (maxY < ndc.y) maxY = ndc.y;
        if (maxZ < ndc.z) maxZ = ndc.z;
    }
    if (!isInClipSpace)
        return;
    
    float2 uvLeftBottom = float2(minX, minY) * 0.5f + 0.5f;
    float2 uvRightTop = float2(maxX, maxY) * 0.5f + 0.5f;
    //DirextX下NDC的z值即为深度（因为MVP变换后是反转过的，所以要取最大的那个值）1
    float depth = maxZ;

    //计算应该读取哪层mipmap
    uint mipmapLevel = (uint)clamp(log2(max(maxX - minX, maxY - minY) * 0.5f * _HizMapSize.x), 0, log2(_HizMapSize.x) - 4);
    //当前mipmap的大小
    uint size = _HizMapSize.x / (1 << mipmapLevel);

    //左下角和右下角点所在的像素,不使用clamp会导致相机左右边出现一条剔除不掉的草，因为有些草部分超框了
    uint2 pixelLeftBottom = uint2(clamp(uvLeftBottom.x * size, 0, size - 1), clamp(uvLeftBottom.y * size, 0, size - 1));
    uint2 pixelRightTop = uint2(clamp(uvRightTop.x * size, 0, size - 1), clamp(uvRightTop.y * size, 0, size - 1));
    
    //采样对应深度图的对应像素的深度值，并且作比较
    float depthInTexture = _HizMap.mips[mipmapLevel][pixelLeftBottom].r;
    
    if (pixelLeftBottom.x < pixelRightTop.x && pixelLeftBottom.y < pixelRightTop.y) {
        depthInTexture = min(min(depthInTexture, _HizMap.mips[mipmapLevel][pixelRightTop].r),
            min(_HizMap.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, _HizMap.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
    }
    else if (pixelLeftBottom.x < pixelRightTop.x)
        depthInTexture = min(depthInTexture, _HizMap.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r);
    else if (pixelLeftBottom.y < pixelRightTop.y)
        depthInTexture = min(depthInTexture, _HizMap.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r);

    if (depthInTexture > depth)
        return;

    result.Append(perInstancedLToWMartix);
}
[numthreads(8,8,1)]
void Copy(uint3 id : SV_DispatchThreadID)
{
    TestResult[id.xy] = _HizMap[id.xy];
}